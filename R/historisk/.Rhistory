# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, psych, rio, tidyverse)
# Clear packages
p_unload(all)  # Remove all add-ons
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
?mtcars
head(mtcars)
cars <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
head(cars)
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
rect.hclust(hc, k = 2, border = "gray")
rect.hclust(hc, k = 3, border = "blue")
rect.hclust(hc, k = 4, border = "green4")
rect.hclust(hc, k = 5, border = "darkred")
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
?mtcars
head(mtcars)
cars <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
head(cars)
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
rect.hclust(hc, k = 2, border = "gray")
rect.hclust(hc, k = 3, border = "blue")
rect.hclust(hc, k = 4, border = "green4")
rect.hclust(hc, k = 5, border = "darkred")
states.x77
state.x77
head(state.x77)
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- state.x77   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
rect.hclust(hc, k = 2, border = "gray")
rect.hclust(hc, k = 3, border = "blue")
rect.hclust(hc, k = 4, border = "green4")
rect.hclust(hc, k = 5, border = "darkred")
cars <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
head(cars)
# For entire data frame ####################################
pc <- prcomp(cars,
center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)   # Sets unit variance (helpful)
pc <- prcomp(~ mpg + cyl + disp + hp + wt + qsec + am +
gear + carb,
data = mtcars,
center = TRUE,
scale = TRUE)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
# Get standard deviations and rotation
pc
# See how cases load on PCs
predict(pc) %>% round(2)
# Biplot of first two components
biplot(pc)
# For entire data frame ####################################
pc <- prcomp(state.x77,
center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)   # Sets unit variance (helpful)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
# Get standard deviations and rotation
pc
# See how cases load on PCs
predict(pc) %>% round(2)
# Biplot of first two components
biplot(pc)
?prcomp
# Get summary stats
summary(pc)
# Get standard deviations and rotation
pc
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
head(USJudgeRatings)
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[-12])
y <- data[, 12]
# Using variable groups
reg1 <- lm(y ~ x)
# Or specify variables individually
reg1 <- lm(RTEN ~ CONT + INTG + DMNR + DILG + CFMG +
DECI + PREP + FAMI + ORAL + WRIT + PHYS,
data = USJudgeRatings)
# Results
reg1           # Coefficients only
summary(reg1)  # Inferential tests
anova(reg1)            # Coefficients w/inferential tests
coef(reg1)             # Coefficients (same as reg1)
confint(reg1)          # CI for coefficients
resid(reg1)            # Residuals case-by-case
hist(residuals(reg1))  # Histogram of residuals
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
# Stagewise: Like stepwise but with better generalizability
forward <- lars(x, y, type = "forward.stagewise")
# LAR: Least Angle Regression
lar <- lars(x, y, type = "lar")
# LASSO: Least Absolute Shrinkage and Selection Operator
lasso <- lars(x, y, type = "lasso")
# Comparison of R^2 for new models
r2comp <- c(stepwise$R2[6], forward$R2[6],
lar$R2[6], lasso$R2[6]) %>%
round(2)
names(r2comp) <- c("stepwise", "forward", "lar", "lasso")
r2comp  # Show values of R^2
lasso
lar
stepwise
data <- state.x77
data
# Define variable groups
x <- as.matrix(data[-2])
y <- data[, 2]
y
hist(y)
# Using variable groups
reg1 <- lm(y ~ x)
x
# Define variable groups
x <- as.matrix(data[-2])
x
data <- state.x77
# Define variable groups
x <- as.matrix(data[-2])
y <- data[, 2]
# Define variable groups
x <- as.matrix(data[, -2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
# Define variable groups
x <- as.matrix(data[-12])
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[-12])
x
y <- data[, 12]
y
data <- state.x77
# Define variable groups
x <- as.matrix(data[, -2])
data <- state.x77
# Define variable groups
x <- as.matrix(data[-2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
# Define variable groups
x <- as.matrix(data[, -2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[, -12])
y <- data[, 12]
x <- data[, -12]
y <- data[, 12]
library(datasets)  # Load base packages manually
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
?USJudgeRatings
head(USJudgeRatings)
data <- USJudgeRatings
x <- data[, -12]
y <- data[, 12]
# Using variable groups
reg1 <- lm(y ~ x)
# Define variable groups
x <- as.matrix(data[, -12])
# Using variable groups
reg1 <- lm(y ~ x)
# Or specify variables individually
reg1 <- lm(RTEN ~ CONT + INTG + DMNR + DILG + CFMG +
DECI + PREP + FAMI + ORAL + WRIT + PHYS,
data = USJudgeRatings)
# Results
reg1           # Coefficients only
summary(reg1)  # Inferential tests
data <- state.x77
# Define variable groups
x <- as.matrix(data[, -2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
summary(reg1)  # Inferential tests
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
summary(stepwise)
stepwise
?state.x77
head(state.x77)
data <- state.x77
# Using variable groups
reg1 <- lm(y ~ x)
reg1
# Or specify variables individually
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder +
"HS Grad", data = state.x77)
# Or specify variables individually
states <- as.data.frame(state.x77)
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder +
"HS Grad", data = states)
states
reg2 <- lm(Income ~ Illiteracy, data = states)
reg2 <- lm(Income ~ Illiteracy + Murder, data = states)
reg2
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder +
"HS Grad", data = states)
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder + "HS Grad", data = states)
reg2 <- lm(Income ~ Illiteracy + "Life Exp" + Murder, data = states)
reg2 <- lm(Income ~ Illiteracy + Murder, data = states)
head(states)
str(states)
reg2 <- lm(Income ~ Illiteracy + Life Exp + Murder +
HS Grad, data = states)
reg2 <- lm(Income ~ Illiteracy + `Life Exp` + Murder +
`HS Grad`, data = states)
reg2
summary(reg1)
summary(reg2)
anova(reg1)            # Coefficients w/inferential tests
data <- as.data.frame(state.x77)
# Use "Income" as the outcome variable and all others as
# predictors.
x <- as.matrix(data[, -2])
y <- data[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
reg1
summary(reg1)
?state.x77
head(state.x77)
states <- as.data.frame(state.x77)
# Use "Income" as the outcome variable and all others as
# predictors.
x <- as.matrix(states[, -2])
x <- states[, -2]
y <- states[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
# Use "Income" as the outcome variable and all others as
# predictors.
x <- as.matrix(states[, -2])
y <- states[, 2]
# Using variable groups
reg1 <- lm(y ~ x)
reg1
summary(reg1)
# Or specify variables individually
# states <- as.data.frame(state.x77)
reg2 <- lm(Income ~ Illiteracy + `Life Exp` + Murder +
`HS Grad`, data = states)
reg2
summary(reg2)
# Clear environment
rm(list = ls())
reg1
states <- as.data.frame(state.x77)
# Use "Income" as the outcome variable and all others as
# predictors.
X <- as.matrix(states[, -2])
y <- states[, 2]
# First regression model, using all of the predictors
reg1 <- lm(y ~ X)
reg1
summary(reg1)
library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
n1 <- 15  # Double precision by default
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
c1 <- "c"
c1
typeof(c1)
c2 <- "a string of text"
c2
typeof(c2)
l1 <- TRUE
l1
typeof(l1)
l2 <- F
l2
typeof(l2)
library(pacman)
install.packages()
install.packages()
install.packages(pacman)
install.packages("pacman")
library(pacman)
p_load('rvest')
webpage <- read_html(url)
webpage <- read_xml(url)
?read_html
p_load('rvest', 'xml2', 'selectr')
url <- 'http://www.imdb.com/search/title?count=100&release_date=2016,2016&title_type=feature'
webpage <- read_html(url)
summary(webpage)
title_html <- html_nodes(webpage) %>% html_nodes(".lister-item-index")
title_html <- read_html(webpage) %>% html_nodes(".lister-item-index")
title_html <- read_html(url) %>% html_nodes(".lister-item-index")
title_html
title_html <- read_html(url) %>% html_nodes(".lister-item-header")
title_html
title_html <- read_html(url) %>% html_nodes(".lister-item-header.a")
title_html
title_html <- read_html(url) %>% html_nodes(".lister-item-header") %>% html_attr('href')
title_html
title_html <- read_html(url) %>% html_nodes(".lister-item-header .a") %>% html_attr('href')
title_html
title_html <- read_html(url) %>% html_nodes(".lister-item-header .a")
title_html
title_html <- read_html(url) %>% html_nodes(".lister-item-header")
title_html
title_html[1]
title_html[1,]
title_html[1]
test <- title_html[1]
View(test)
View(title_html)
View(title_html)
title_html <- read_html(url) %>% html_nodes(".lister-item-header") %>% html_nodes("a")
title_html
a <- res <- str_match(a, ">(.*?)<")
a <- res <- str_match(title_html, ">(.*?)<")
test
title_html
a <- str_match(title_html, ">(.*?)<")
a
title_html
title_html[1]
a <- str_match(title_html[1], ">(.*?)<")
p_load('rvest', 'xml2', 'selectr', 'stingr')
p_load('rvest', 'xml2', 'selectr', 'stringr')
a <- str_match(title_html[1], ">(.*?)<")
a
a <- gsub(">(.*?)<", title_html[1])
title_html <- read_html(url) %>% html_nodes(".lister-item-header") %>% html_nodes("a")
title_html
View(a)
rm(list = ls())
library(datasets)
plot(iris)
warning()
warnings()
plot(iris)
library(datasets)
plot(iris)
version
par(family = "Arial")
plot(iris)
library(datasets)
par(family = "Arial")
plot(iris)
rm(list = ls())
# Clear display and environment
dev.off()
rm(list = ls())
library(datasets)
par(family = "Arial")
plot(iris)
# Clear
dev.off()
rm(list = ls())
rawdata = as.data.frame(read.csv('CARL_B.csv', header=T, sep=";"))
setwd("~/projects/mjcgit/lang/R/historisk")
rawdata = as.data.frame(read.csv('CARL_B.csv', header=T, sep=";"))
head(rawdata)
# Remove last row due to extra ":"
data = rawdata[,-12]
summary(data)
head(data)
hist(data$Trades,
axes=T,
main = "Trades")
plot(data)
plot(data$Date, data$Closing.price)
good <- data[data$Closing.price > data$Opening.price]
good <- [data$Closing.price > data$Opening.price]
data$Closing.price > data$Opening.price
summary(data)
describe(data)
str(data)
data$Bid <- as.numeric(data$Bid)
str(data)
data$Bid <- as.numeric(data$Bid)
data$Ask <- as.numeric(data$Ask)
data$Opening.price <- as.numeric(data$Opening.price)
data$Closing.price <- as.numeric(data$Closing.price)
str(data)
data$Date <- as.date(data$Date)
data$Date <- as.Date(data$Date)
str(data)
data$Opening.price <- as.numeric(data$Opening.price)
data$Closing.price <- as.numeric(data$Closing.price)
data$High.price <- as.numeric(data$High.price)
data$Low.price <- as.numeric(data$Low.price)
str(data)
data$Average.price <- as.numeric(data$Average.price)
data$Total.volume <- as.numeric(data$Total.volume)
data$Turnover <- as.numeric(data$Turnover)
data$Trades <- as.numeric(data$Trades)
str(data)
hist(data$Trades,
axes=T,
main = "Trades")
hist(data$Closing.price,
axes=T,
main = "Trades")
# Clear
dev.off()
rm(list = ls())
